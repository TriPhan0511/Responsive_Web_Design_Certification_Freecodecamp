/* 01: CREATE A MEDIA QUERY */
/* 
  Media Queries are new technique introduced in CSS3 that change the presentation 
  of content based on different viewport sizes.
  The viewport is a user's visible area of a web page, and is different depending on 
  the device used to access the site.

  Media Queries consit of a media type, and if that media type matches the type of 
  device the document is displayed on, the styles are applied. You can have as many
  selectors and styles inside your media query as you want.

  Here's an example of a media query that returns the content when the device's width
  is less than or equal to 100px:

    @media (max-width: 100px) { CSS Rules }

  and the following media query returns the content when the device height's is more
  than or equal to 350px:

    @media (min-height: 350px) { CSS Rules }

  Remember, the CSS inside the media query is applied only if the media type matches
  that of the device being used.
*/

/* 
  Add a media query, so that the .myPara class has a font-size of 10px when the device's
  height is less than or equal to 800px.
*/
.myPara {
  font-size: 20px;
}

@media (max-height: 800px) {
  .myPara {
    font-size: 10px;
  }
}
/* -------------------------------------------------------------------------------------------------- */

/* 02: MAKE AN IMAGE RESPONSIVE */

/* 
  Making images responsive with CSS is actually very simple. You just need to add these 
  properties to an image:

    img {
      max-with: 100%;
      height: auto;
    }

  The max-width of 100% will make sure the images never wider than the container it
  is in, and the height of auto will make the image keep its original aspect ratio.
*/

/* 
    Add the style rules to the responsive-img class to make it responsive. It should
    never ve wider than its container (in this case, it's the preview window) and it 
    should keep its original aspect ratio. After you have added your code, resize the
    preview to see how your images behave.
*/

/* img {
  width: 600px;
}

.responsive-img {
  max-width: 100%;
  height: auto;
} */
/* -------------------------------------------------------------------------------------------------- */

/* 03. USE A RETINA IMAGE FOR HIGHER RESOLUTION DISPLAYS */

/* 
  With the increase of internet connected devices, their sizes and specifications vary, 
  and the displays they use could be different externally and internally.
  Pixel density is an aspect that could be different on one device from others and this
  density is known as Pixel Per Inch(PPI) or Dots Per Inch(DPI). 
  The most famous such display is the one known as a "Retina Display" on the latest 
  Apple MacBookPro notenooks, and recently iMac computers. Due to the difference in
  poxel density between a "Retina" and "Non-Retina" displays, some images that 
  have not been made with a High Resolution Display in mind could look "pixelated"
  when rendered on a High Resolution display.

  The simplest way to make you images properly appear on High-Resolution Displays,
  such as MacBook Pros "retina display" is to define their width and height values
  as only half of what the original file is. Here is an example of an image that
  is only using half of the original height and width:

    <style>
      img {
        height: 250px;
        width: 250px;
      }
    <style>

    <img scr="coolPic500x500" alt="A most excellent picture">
*/

/* 
  Set the width and height of the img tag to half of their original values.
  In this case, both the original height and width are 200px.
*/

/* img.half-values {
  height: 100px;
  width: 100px;
} */
/* -------------------------------------------------------------------------------------------------- */

/* 
  04. MAKE TYPOGRAPHY RESPONSIVE
*/

/* 
  Instead of using em or px to size text, you can use viewport units for responsive typography.
  Viewport units, like percentages, are relative units, but they are based off different items.
  Viewport units are relative to the viewport dimensions (width or height) of a device, and
  percentages are relative to the size of th parent container element.

  The four diffent viewport units are:
    1. vw (viewport width): 10vw would be 10% of the viewport's width
    2. vh (viewport height): 3vh would be 3% of the viewport's height.
    3. vmin (viewport minimum): 70vmin would be 70% of the 
      viewport's smaller dimesion (height or width).
    4. vmax (viewport maximum): 100vmax would be 100% of the
      viewport's bigger dimension (height or width).

  Here is an example that sets a body tag to 30% of the viewport's width:

    <style>
      body {
        width: 30vw;
      }
    </style>
*/

/* 
  Set the width of h2 tag to 80% of the viewport's width and the width of the paragraph
  as 75% of the viewport's smaller dimension.
*/

h2.myHeading {
  width: 80vw;
}

p.myPara-2 {
  width: 75vmin;
}
