/* 
  21: USE MEDIA QUERIES TO CREATE RESPONSIVE LAYOUTS
*/

/* 
  CSS Grid can be an easy way to make your site more responsive by using media queries 
  to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.
*/

/* 
  When the viewport width is 300px or more, the number of columns
  changes from 1 to 2. The advertise area then occupies the left column completely.
*/

/* 
  When the viewport width if 400px or more, make the header area occupies the top row
  completely and the footer area occupies the bottom row completely.
*/

.item1 {
  background: LightSkyBlue;
  grid-area: header;
}
.item2 {
  background: LightSalmon;
  grid-area: advert;
}
.item3 {
  background: PaleTurquoise;
  grid-area: content;
}
.item4 {
  background: LightPink;
  grid-area: footer;
}
/* ----------------------------------- */

.container {
  font-size: 1.5em;
  min-height: 300px;
  width: 100%;
  background-color: lightgray;

  display: grid;

  grid-template-columns: 1fr;
  grid-template-rows: 50px auto 1fr auto;
  gap: 10px;
  grid-template-areas:
    'header'
    'advert'
    'content'
    'footer';
}

@media (min-width: 300px) {
  .container {
    grid-template-columns: auto 1fr;
    grid-template-rows: auto 1fr auto;
    grid-template-areas:
      'advert header'
      'advert content'
      'advert footer';
  }
}

@media (min-width: 400px) {
  .container {
    grid-template-areas:
      'header header'
      'advert content'
      'footer footer';
  }
}
